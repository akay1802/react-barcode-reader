{"ast":null,"code":"import React, { useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Quagga from '@ericblade/quagga2';\n\nfunction getMedian(arr) {\n  arr.sort((a, b) => a - b);\n  const half = Math.floor(arr.length / 2);\n\n  if (arr.length % 2 === 1) {\n    return arr[half];\n  }\n\n  return (arr[half - 1] + arr[half]) / 2;\n}\n\nfunction getMedianOfCodeErrors(decodedCodes) {\n  const errors = decodedCodes.filter(x => x.error !== undefined).map(x => x.error);\n  const medianOfErrors = getMedian(errors);\n  return medianOfErrors;\n}\n\nconst defaultConstraints = {\n  width: 640,\n  height: 480\n};\nconst defaultLocatorSettings = {\n  patchSize: 'medium',\n  halfSample: true\n};\nconst defaultDecoders = [\"code_128_reader\", \"ean_5_reader\", \"upc_reader\", \"ean_reader\", \"ean_8_reader\", \"ean_2_reader\", \"code_39_reader\", \"code_93_reader\"];\n\nconst Scanner = ({\n  onDetected,\n  scannerRef,\n  onScannerReady,\n  cameraId,\n  facingMode,\n  constraints = defaultConstraints,\n  locator = defaultLocatorSettings,\n  numOfWorkers = navigator.hardwareConcurrency || 0,\n  decoders = defaultDecoders,\n  locate = true\n}) => {\n  const errorCheck = useCallback(result => {\n    if (!onDetected) {\n      return;\n    }\n\n    const err = getMedianOfCodeErrors(result.codeResult.decodedCodes); // if Quagga is at least 75% certain that it read correctly, then accept the code.\n\n    if (err < 0.25) {\n      onDetected(result.codeResult.code);\n    }\n  }, [onDetected]);\n\n  const handleProcessed = result => {\n    const drawingCtx = Quagga.canvas.ctx.overlay;\n    const drawingCanvas = Quagga.canvas.dom.overlay;\n    drawingCtx.font = \"24px Arial\";\n    drawingCtx.fillStyle = 'green';\n\n    if (result) {\n      // console.warn('* quagga onProcessed', result);\n      if (result.boxes) {\n        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n        result.boxes.filter(box => box !== result.box).forEach(box => {\n          Quagga.ImageDebug.drawPath(box, {\n            x: 0,\n            y: 1\n          }, drawingCtx, {\n            color: 'purple',\n            lineWidth: 2\n          });\n        });\n      }\n\n      if (result.box) {\n        Quagga.ImageDebug.drawPath(result.box, {\n          x: 0,\n          y: 1\n        }, drawingCtx, {\n          color: 'blue',\n          lineWidth: 2\n        });\n      }\n\n      if (result.codeResult && result.codeResult.code) {\n        // const validated = barcodeValidator(result.codeResult.code);\n        // const validated = validateBarcode(result.codeResult.code);\n        // Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: validated ? 'green' : 'red', lineWidth: 3 });\n        drawingCtx.font = \"24px Arial\"; // drawingCtx.fillStyle = validated ? 'green' : 'red';\n        // drawingCtx.fillText(`${result.codeResult.code} valid: ${validated}`, 10, 50);\n\n        drawingCtx.fillText(result.codeResult.code, 10, 20); // if (validated) {\n        //     onDetected(result);\n        // }\n      }\n    }\n  };\n\n  useLayoutEffect(() => {\n    Quagga.init({\n      inputStream: {\n        type: 'LiveStream',\n        constraints: { ...constraints,\n          ...(cameraId && {\n            deviceId: cameraId\n          }),\n          ...(!cameraId && {\n            facingMode\n          })\n        },\n        target: scannerRef.current\n      },\n      locator,\n      numOfWorkers,\n      decoder: {\n        readers: decoders\n      },\n      locate\n    }, err => {\n      Quagga.onProcessed(handleProcessed);\n\n      if (err) {\n        return console.log('Error starting Quagga:', err);\n      }\n\n      if (scannerRef && scannerRef.current) {\n        Quagga.start();\n\n        if (onScannerReady) {\n          onScannerReady();\n        }\n      }\n    });\n    Quagga.onDetected(errorCheck);\n    return () => {\n      Quagga.offDetected(errorCheck);\n      Quagga.offProcessed(handleProcessed);\n      Quagga.stop();\n    };\n  }, [cameraId, onDetected, onScannerReady, scannerRef, errorCheck, constraints, locator, decoders, locate]);\n  return null;\n};\n\nScanner.propTypes = {\n  onDetected: PropTypes.func.isRequired,\n  scannerRef: PropTypes.object.isRequired,\n  onScannerReady: PropTypes.func,\n  cameraId: PropTypes.string,\n  facingMode: PropTypes.string,\n  constraints: PropTypes.object,\n  locator: PropTypes.object,\n  numOfWorkers: PropTypes.number,\n  decoders: PropTypes.array,\n  locate: PropTypes.bool\n};\nexport default Scanner;","map":{"version":3,"sources":["/Users/karthik/dev/milkyway/src/Scanner.js"],"names":["React","useCallback","useLayoutEffect","PropTypes","Quagga","getMedian","arr","sort","a","b","half","Math","floor","length","getMedianOfCodeErrors","decodedCodes","errors","filter","x","error","undefined","map","medianOfErrors","defaultConstraints","width","height","defaultLocatorSettings","patchSize","halfSample","defaultDecoders","Scanner","onDetected","scannerRef","onScannerReady","cameraId","facingMode","constraints","locator","numOfWorkers","navigator","hardwareConcurrency","decoders","locate","errorCheck","result","err","codeResult","code","handleProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","font","fillStyle","boxes","clearRect","parseInt","getAttribute","box","forEach","ImageDebug","drawPath","y","color","lineWidth","fillText","init","inputStream","type","deviceId","target","current","decoder","readers","onProcessed","console","log","start","offDetected","offProcessed","stop","propTypes","func","isRequired","object","string","number","array","bool"],"mappings":"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","sourcesContent":["import React, { useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Quagga from '@ericblade/quagga2';\n\nfunction getMedian(arr) {\n    arr.sort((a, b) => a - b);\n    const half = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 1) {\n        return arr[half];\n    }\n    return (arr[half - 1] + arr[half]) / 2;\n}\n\nfunction getMedianOfCodeErrors(decodedCodes) {\n    const errors = decodedCodes.filter(x => x.error !== undefined).map(x => x.error);\n    const medianOfErrors = getMedian(errors);\n    return medianOfErrors;\n}\n\nconst defaultConstraints = {\n    width: 640,\n    height: 480,\n};\n\nconst defaultLocatorSettings = {\n    patchSize: 'medium',\n    halfSample: true,\n};\n\nconst defaultDecoders = [\"code_128_reader\", \"ean_5_reader\",\"upc_reader\",\"ean_reader\",\"ean_8_reader\", \"ean_2_reader\", \"code_39_reader\", \"code_93_reader\"];\n\nconst Scanner = ({\n    onDetected,\n    scannerRef,\n    onScannerReady,\n    cameraId,\n    facingMode,\n    constraints = defaultConstraints,\n    locator = defaultLocatorSettings,\n    numOfWorkers = navigator.hardwareConcurrency || 0,\n    decoders = defaultDecoders,\n    locate = true,\n}) => {\n    const errorCheck = useCallback((result) => {\n        if (!onDetected) {\n            return;\n        }\n        const err = getMedianOfCodeErrors(result.codeResult.decodedCodes);\n        // if Quagga is at least 75% certain that it read correctly, then accept the code.\n        if (err < 0.25) {\n            onDetected(result.codeResult.code);\n        }\n    }, [onDetected]);\n\n    const handleProcessed = (result) => {\n        const drawingCtx = Quagga.canvas.ctx.overlay;\n        const drawingCanvas = Quagga.canvas.dom.overlay;\n        drawingCtx.font = \"24px Arial\";\n        drawingCtx.fillStyle = 'green';\n\n        if (result) {\n            // console.warn('* quagga onProcessed', result);\n            if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n                result.boxes.filter((box) => box !== result.box).forEach((box) => {\n                    Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'purple', lineWidth: 2 });\n                });\n            }\n            if (result.box) {\n                Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: 'blue', lineWidth: 2 });\n            }\n            if (result.codeResult && result.codeResult.code) {\n                // const validated = barcodeValidator(result.codeResult.code);\n                // const validated = validateBarcode(result.codeResult.code);\n                // Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: validated ? 'green' : 'red', lineWidth: 3 });\n                drawingCtx.font = \"24px Arial\";\n                // drawingCtx.fillStyle = validated ? 'green' : 'red';\n                // drawingCtx.fillText(`${result.codeResult.code} valid: ${validated}`, 10, 50);\n                drawingCtx.fillText(result.codeResult.code, 10, 20);\n                // if (validated) {\n                //     onDetected(result);\n                // }\n            }\n        }\n    };\n\n    useLayoutEffect(() => {\n        Quagga.init({\n            inputStream: {\n                type: 'LiveStream',\n                constraints: {\n                    ...constraints,\n                    ...(cameraId && { deviceId: cameraId }),\n                    ...(!cameraId && { facingMode }),\n                },\n                target: scannerRef.current,\n            },\n            locator,\n            numOfWorkers,\n            decoder: { readers: decoders },\n            locate,\n        }, (err) => {\n            Quagga.onProcessed(handleProcessed);\n\n            if (err) {\n                return console.log('Error starting Quagga:', err);\n            }\n            if (scannerRef && scannerRef.current) {\n                Quagga.start();\n                if (onScannerReady) {\n                    onScannerReady();\n                }\n            }\n        });\n        Quagga.onDetected(errorCheck);\n        return () => {\n            Quagga.offDetected(errorCheck);\n            Quagga.offProcessed(handleProcessed);\n            Quagga.stop();\n        };\n    }, [cameraId, onDetected, onScannerReady, scannerRef, errorCheck, constraints, locator, decoders, locate]);\n    return null;\n}\n\nScanner.propTypes = {\n    onDetected: PropTypes.func.isRequired,\n    scannerRef: PropTypes.object.isRequired,\n    onScannerReady: PropTypes.func,\n    cameraId: PropTypes.string,\n    facingMode: PropTypes.string,\n    constraints: PropTypes.object,\n    locator: PropTypes.object,\n    numOfWorkers: PropTypes.number,\n    decoders: PropTypes.array,\n    locate: PropTypes.bool,\n};\n\nexport default Scanner;"]},"metadata":{},"sourceType":"module"}