{"ast":null,"code":"var _jsxFileName = \"/Users/karthik/dev/milkyway/src/Scanner.js\";\nimport React from 'react';\nimport Quagga from '@ericblade/quagga2';\n\nclass Scanner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"interactive\",\n      className: \"viewport\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    });\n  }\n\n  async componentDidMount() {\n    // Quagga.init({\n    //     inputStream: {\n    //         type : \"LiveStream\",\n    //         constraints: {\n    //             width: 640,\n    //             height: 480,\n    //             facing: \"environment\" // or user\n    //         }\n    //     },\n    //     locator: {\n    //         patchSize: \"medium\",\n    //         halfSample: true\n    //     },\n    //     numOfWorkers: 2,\n    //     decoder: {\n    //         readers : [ \"code_128_reader\"]\n    //     },\n    //     locate: true\n    // }, function(err) {\n    //     if (err) {\n    //         return console.log(err);\n    //     }\n    //     Quagga.start();\n    // });\n    // Quagga.onDetected(this._onDetected);\n    debugger;\n    await Quagga.decodeSingle({\n      decoder: {\n        readers: [\"code_128_reader\"] // List of active readers\n\n      },\n      locate: true,\n      // try to locate the barcode in the image\n      src: '../test.jpg' // or 'data:image/jpg;base64,' + data\n\n    }, function (result) {\n      if (result.codeResult) {\n        debugger;\n        this.props.onDetected(result); // console.log(\"result\", result.codeResult.code);\n      } else {\n        console.log(\"not detected\");\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Quagga.offDetected(this._onDetected);\n  }\n\n  _onDetected(result) {\n    this.props.onDetected(result);\n  }\n\n}\n\nexport default Scanner;","map":{"version":3,"sources":["/Users/karthik/dev/milkyway/src/Scanner.js"],"names":["React","Quagga","Scanner","Component","constructor","props","state","render","componentDidMount","decodeSingle","decoder","readers","locate","src","result","codeResult","onDetected","console","log","componentWillUnmount","offDetected","_onDetected"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa,EAAb;AAIH;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,EAAE,EAAC,aAAR;AAAsB,MAAA,SAAS,EAAC,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AAED,QAAMC,iBAAN,GAA0B;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMP,MAAM,CAACQ,YAAP,CAAoB;AACtBC,MAAAA,OAAO,EAAE;AACLC,QAAAA,OAAO,EAAE,CAAC,iBAAD,CADJ,CACwB;;AADxB,OADa;AAItBC,MAAAA,MAAM,EAAE,IAJc;AAIR;AACdC,MAAAA,GAAG,EAAE,aALiB,CAKH;;AALG,KAApB,EAMH,UAASC,MAAT,EAAgB;AACf,UAAGA,MAAM,CAACC,UAAV,EAAsB;AAClB;AACA,aAAKV,KAAL,CAAWW,UAAX,CAAsBF,MAAtB,EAFkB,CAGlB;AACH,OAJD,MAIO;AACHG,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ,KAdK,CAAN;AAgBH;;AAEDC,EAAAA,oBAAoB,GAAG;AACnBlB,IAAAA,MAAM,CAACmB,WAAP,CAAmB,KAAKC,WAAxB;AACH;;AAEDA,EAAAA,WAAW,CAACP,MAAD,EAAS;AAChB,SAAKT,KAAL,CAAWW,UAAX,CAAsBF,MAAtB;AACH;;AAlEiC;;AAoEtC,eAAeZ,OAAf","sourcesContent":["import React from 'react';\nimport Quagga from '@ericblade/quagga2';\n\nclass Scanner extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n           \n        }\n        \n    };\n    render() {\n        return (\n            <div id=\"interactive\" className=\"viewport\"/>\n        );\n    }\n\n    async componentDidMount() {\n        // Quagga.init({\n        //     inputStream: {\n        //         type : \"LiveStream\",\n        //         constraints: {\n        //             width: 640,\n        //             height: 480,\n        //             facing: \"environment\" // or user\n        //         }\n        //     },\n        //     locator: {\n        //         patchSize: \"medium\",\n        //         halfSample: true\n        //     },\n        //     numOfWorkers: 2,\n        //     decoder: {\n        //         readers : [ \"code_128_reader\"]\n        //     },\n        //     locate: true\n        // }, function(err) {\n        //     if (err) {\n        //         return console.log(err);\n        //     }\n        //     Quagga.start();\n        // });\n        // Quagga.onDetected(this._onDetected);\n        debugger\n        await Quagga.decodeSingle({\n            decoder: {\n                readers: [\"code_128_reader\"] // List of active readers\n            },\n            locate: true, // try to locate the barcode in the image\n            src: '../test.jpg' // or 'data:image/jpg;base64,' + data\n        }, function(result){\n            if(result.codeResult) {\n                debugger\n                this.props.onDetected(result);\n                // console.log(\"result\", result.codeResult.code);\n            } else {\n                console.log(\"not detected\");\n            }\n        });\n        \n    }\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected);\n    }\n\n    _onDetected(result) {\n        this.props.onDetected(result);\n    }\n}\nexport default Scanner"]},"metadata":{},"sourceType":"module"}