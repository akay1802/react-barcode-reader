{"ast":null,"code":"import _objectSpread from\"/Users/karthik/dev/milkyway/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useCallback,useLayoutEffect}from'react';import PropTypes from'prop-types';import Quagga from'@ericblade/quagga2';function getMedian(arr){arr.sort(function(a,b){return a-b;});var half=Math.floor(arr.length/2);if(arr.length%2===1){return arr[half];}return(arr[half-1]+arr[half])/2;}function getMedianOfCodeErrors(decodedCodes){var errors=decodedCodes.filter(function(x){return x.error!==undefined;}).map(function(x){return x.error;});var medianOfErrors=getMedian(errors);return medianOfErrors;}var defaultConstraints={width:640,height:480};var defaultLocatorSettings={patchSize:'medium',halfSample:true};var defaultDecoders=[\"code_128_reader\",\"ean_5_reader\",\"upc_reader\",\"ean_reader\",\"ean_8_reader\",\"ean_2_reader\",\"code_39_reader\",\"code_93_reader\"];var Scanner=function Scanner(_ref){var onDetected=_ref.onDetected,scannerRef=_ref.scannerRef,onScannerReady=_ref.onScannerReady,cameraId=_ref.cameraId,facingMode=_ref.facingMode,_ref$constraints=_ref.constraints,constraints=_ref$constraints===void 0?defaultConstraints:_ref$constraints,_ref$locator=_ref.locator,locator=_ref$locator===void 0?defaultLocatorSettings:_ref$locator,_ref$numOfWorkers=_ref.numOfWorkers,numOfWorkers=_ref$numOfWorkers===void 0?navigator.hardwareConcurrency||0:_ref$numOfWorkers,_ref$decoders=_ref.decoders,decoders=_ref$decoders===void 0?defaultDecoders:_ref$decoders,_ref$locate=_ref.locate,locate=_ref$locate===void 0?true:_ref$locate;var errorCheck=useCallback(function(result){if(!onDetected){return;}var err=getMedianOfCodeErrors(result.codeResult.decodedCodes);// if Quagga is at least 75% certain that it read correctly, then accept the code.\nif(err<0.25){onDetected(result.codeResult.code);}},[onDetected]);var handleProcessed=function handleProcessed(result){var drawingCtx=Quagga.canvas.ctx.overlay;var drawingCanvas=Quagga.canvas.dom.overlay;drawingCtx.font=\"24px Arial\";drawingCtx.fillStyle='green';if(result){// console.warn('* quagga onProcessed', result);\nif(result.boxes){drawingCtx.clearRect(0,0,parseInt(drawingCanvas.getAttribute('width')),parseInt(drawingCanvas.getAttribute('height')));result.boxes.filter(function(box){return box!==result.box;}).forEach(function(box){Quagga.ImageDebug.drawPath(box,{x:0,y:1},drawingCtx,{color:'purple',lineWidth:2});});}if(result.box){Quagga.ImageDebug.drawPath(result.box,{x:0,y:1},drawingCtx,{color:'blue',lineWidth:2});}if(result.codeResult&&result.codeResult.code){// const validated = barcodeValidator(result.codeResult.code);\n// const validated = validateBarcode(result.codeResult.code);\n// Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: validated ? 'green' : 'red', lineWidth: 3 });\ndrawingCtx.font=\"24px Arial\";// drawingCtx.fillStyle = validated ? 'green' : 'red';\n// drawingCtx.fillText(`${result.codeResult.code} valid: ${validated}`, 10, 50);\ndrawingCtx.fillText(result.codeResult.code,10,20);// if (validated) {\n//     onDetected(result);\n// }\n}}};useLayoutEffect(function(){Quagga.init({inputStream:{type:'LiveStream',constraints:_objectSpread(_objectSpread(_objectSpread({},constraints),cameraId&&{deviceId:cameraId}),!cameraId&&{facingMode:facingMode}),target:scannerRef.current},locator:locator,numOfWorkers:numOfWorkers,decoder:{readers:decoders},locate:true},function(err){Quagga.onProcessed(handleProcessed);if(err){return console.log('Error starting Quagga:',err);}if(scannerRef&&scannerRef.current){Quagga.start();if(onScannerReady){onScannerReady();}}});Quagga.onDetected(errorCheck);return function(){Quagga.offDetected(errorCheck);Quagga.offProcessed(handleProcessed);Quagga.stop();};},[cameraId,onDetected,onScannerReady,scannerRef,errorCheck,constraints,locator,decoders,locate]);return null;};Scanner.propTypes={onDetected:PropTypes.func.isRequired,scannerRef:PropTypes.object.isRequired,onScannerReady:PropTypes.func,cameraId:PropTypes.string,facingMode:PropTypes.string,constraints:PropTypes.object,locator:PropTypes.object,numOfWorkers:PropTypes.number,decoders:PropTypes.array,locate:PropTypes.bool};export default Scanner;","map":{"version":3,"sources":["/Users/karthik/dev/milkyway/src/Components/Scanner.js"],"names":["useCallback","useLayoutEffect","PropTypes","Quagga","getMedian","arr","sort","a","b","half","Math","floor","length","getMedianOfCodeErrors","decodedCodes","errors","filter","x","error","undefined","map","medianOfErrors","defaultConstraints","width","height","defaultLocatorSettings","patchSize","halfSample","defaultDecoders","Scanner","onDetected","scannerRef","onScannerReady","cameraId","facingMode","constraints","locator","numOfWorkers","navigator","hardwareConcurrency","decoders","locate","errorCheck","result","err","codeResult","code","handleProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","font","fillStyle","boxes","clearRect","parseInt","getAttribute","box","forEach","ImageDebug","drawPath","y","color","lineWidth","fillText","init","inputStream","type","deviceId","target","current","decoder","readers","onProcessed","console","log","start","offDetected","offProcessed","stop","propTypes","func","isRequired","object","string","number","array","bool"],"mappings":"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","sourcesContent":["import { useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Quagga from '@ericblade/quagga2';\n\nfunction getMedian(arr) {\n    arr.sort((a, b) => a - b);\n    const half = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 1) {\n        return arr[half];\n    }\n    return (arr[half - 1] + arr[half]) / 2;\n}\n\nfunction getMedianOfCodeErrors(decodedCodes) {\n    const errors = decodedCodes.filter(x => x.error !== undefined).map(x => x.error);\n    const medianOfErrors = getMedian(errors);\n    return medianOfErrors;\n}\n\nconst defaultConstraints = {\n    width: 640,\n    height: 480,\n};\n\nconst defaultLocatorSettings = {\n    patchSize: 'medium',\n    halfSample: true,\n};\n\nconst defaultDecoders = [\"code_128_reader\", \"ean_5_reader\", \"upc_reader\", \"ean_reader\", \"ean_8_reader\", \"ean_2_reader\", \"code_39_reader\", \"code_93_reader\"];\n\nconst Scanner = ({\n    onDetected,\n    scannerRef,\n    onScannerReady,\n    cameraId,\n    facingMode,\n    constraints = defaultConstraints,\n    locator = defaultLocatorSettings,\n    numOfWorkers = navigator.hardwareConcurrency || 0,\n    decoders = defaultDecoders,\n    locate = true,\n}) => {\n    const errorCheck = useCallback((result) => {\n        if (!onDetected) {\n            return;\n        }\n        const err = getMedianOfCodeErrors(result.codeResult.decodedCodes);\n        // if Quagga is at least 75% certain that it read correctly, then accept the code.\n        if (err < 0.25) {\n            onDetected(result.codeResult.code);\n        }\n    }, [onDetected]);\n\n    const handleProcessed = (result) => {\n        const drawingCtx = Quagga.canvas.ctx.overlay;\n        const drawingCanvas = Quagga.canvas.dom.overlay;\n        drawingCtx.font = \"24px Arial\";\n        drawingCtx.fillStyle = 'green';\n\n        if (result) {\n            // console.warn('* quagga onProcessed', result);\n            if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n                result.boxes.filter((box) => box !== result.box).forEach((box) => {\n                    Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'purple', lineWidth: 2 });\n                });\n            }\n            if (result.box) {\n                Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: 'blue', lineWidth: 2 });\n            }\n            if (result.codeResult && result.codeResult.code) {\n                // const validated = barcodeValidator(result.codeResult.code);\n                // const validated = validateBarcode(result.codeResult.code);\n                // Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: validated ? 'green' : 'red', lineWidth: 3 });\n                drawingCtx.font = \"24px Arial\";\n                // drawingCtx.fillStyle = validated ? 'green' : 'red';\n                // drawingCtx.fillText(`${result.codeResult.code} valid: ${validated}`, 10, 50);\n                drawingCtx.fillText(result.codeResult.code, 10, 20);\n                // if (validated) {\n                //     onDetected(result);\n                // }\n            }\n        }\n    };\n\n    useLayoutEffect(() => {\n        Quagga.init({\n            inputStream: {\n                type: 'LiveStream',\n                constraints: {\n                    ...constraints,\n                    ...(cameraId && { deviceId: cameraId }),\n                    ...(!cameraId && { facingMode }),\n                },\n                target: scannerRef.current,\n            },\n            locator,\n            numOfWorkers,\n            decoder: { readers: decoders },\n            locate: true,\n        }, (err) => {\n            Quagga.onProcessed(handleProcessed);\n\n            if (err) {\n                return console.log('Error starting Quagga:', err);\n            }\n            if (scannerRef && scannerRef.current) {\n                Quagga.start();\n                if (onScannerReady) {\n                    onScannerReady();\n                }\n            }\n        });\n        Quagga.onDetected(errorCheck);\n        return () => {\n            Quagga.offDetected(errorCheck);\n            Quagga.offProcessed(handleProcessed);\n            Quagga.stop();\n        };\n    }, [cameraId, onDetected, onScannerReady, scannerRef, errorCheck, constraints, locator, decoders, locate]);\n    return null;\n}\n\nScanner.propTypes = {\n    onDetected: PropTypes.func.isRequired,\n    scannerRef: PropTypes.object.isRequired,\n    onScannerReady: PropTypes.func,\n    cameraId: PropTypes.string,\n    facingMode: PropTypes.string,\n    constraints: PropTypes.object,\n    locator: PropTypes.object,\n    numOfWorkers: PropTypes.number,\n    decoders: PropTypes.array,\n    locate: PropTypes.bool,\n};\n\nexport default Scanner;"]},"metadata":{},"sourceType":"module"}