{"version":3,"sources":["noImage.png","AppContext.js","Components/Navbar.js","Components/FileScan.js","Components/History.js","Components/Scanner.js","Components/Result.js","Components/LiveScan.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppContext","React","createContext","AppProvider","Provider","Consumer","NavbarComponent","props","state","onClickHandler","bind","event","id","target","this","context","setVal","key","value","Navbar","bg","variant","Brand","href","Nav","className","Button","onClick","Component","contextType","FileScan","triggerInputFile","result","console","log","box","imgEl","document","getElementById","cnvs","style","position","left","offsetLeft","top","offsetTop","ctx","getContext","beginPath","line","moveTo","lineTo","stroke","lineWidth","strokeStyle","imgResize","width","height","canvas","createElement","drawImage","toDataURL","files","file","toBase64","fileData","setState","uploadedImage","isLoading","scanFileForBarcode","fileInput","click","barcodeObj","history","push","self","Quagga","decodeSingle","decoder","readers","locate","size","src","codeResult","addToHistory","img","barcode","code","barcodeType","format","time","Date","highlightBarcode","barcodeDetected","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","Container","marginTop","Row","lg","Col","border","alt","marginLeft","marginRight","Card","ref","type","onChange","handleChange","display","accept","Body","Header","Spinner","animation","History","map","obj","margin","toTimeString","renderHistory","getMedianOfCodeErrors","decodedCodes","arr","sort","a","b","half","Math","floor","length","getMedian","filter","x","undefined","defaultConstraints","defaultLocatorSettings","patchSize","halfSample","defaultDecoders","Scanner","onDetected","scannerRef","onScannerReady","cameraId","facingMode","constraints","locator","numOfWorkers","navigator","hardwareConcurrency","decoders","errorCheck","useCallback","handleProcessed","drawingCtx","overlay","drawingCanvas","dom","font","fillStyle","boxes","clearRect","parseInt","getAttribute","forEach","ImageDebug","drawPath","y","color","fillText","useLayoutEffect","init","inputStream","deviceId","current","err","onProcessed","start","offDetected","offProcessed","stop","propTypes","PropTypes","func","isRequired","object","string","number","array","bool","Result","LiveScan","useState","scanning","setScanning","results","setResults","useRef","App","currentTab","renderTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.11e52731.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/noImage.227f4aa0.png\";","import React from 'react';\n\nconst AppContext = React.createContext();\n\nexport const AppProvider = AppContext.Provider\nexport const AppConsumer = AppContext.Consumer\nexport default AppContext\n","import React from 'react';\nimport { Navbar, Nav, Button } from 'react-bootstrap'\nimport AppContext from '../AppContext';\n\nclass NavbarComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n        this.onClickHandler = this.onClickHandler.bind(this);\n    }\n    onClickHandler(event){\n        const { target: { id } } = event;\n        this.context.setVal({ key: 'currentTab', value: id });\n    }\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Navbar.Brand href=\"#home\">Barcode Scanner</Navbar.Brand>\n                    <Nav className=\"mr-auto\">\n                        <Button variant=\"dark\" id='fileScan' onClick={this.onClickHandler}>File Scan</Button>\n                        <Button variant=\"dark\" id='liveScan' onClick={this.onClickHandler}>Live Scan</Button>\n                        <Button variant=\"dark\" id='history' onClick={this.onClickHandler}>Histroy</Button>\n                    </Nav>\n\n                </Navbar>\n            </div>\n        )\n    }\n}\nNavbarComponent.contextType = AppContext;\nexport default NavbarComponent;\n\n","import React from 'react';\nimport {  Button, Container, Row, Col, Card, Spinner } from 'react-bootstrap'\nimport AppContext from '../AppContext';\nimport '../App.css'\nimport img from '../noImage.png'\nimport Quagga from '@ericblade/quagga2';\nconst IMAGE_WIDTH = \"100%\";\nconst IMAGE_HEIGHT = \"100%\";\nclass FileScan extends React.Component {\n    constructor(props){\n        super(props)\n        this.state={\n        }\n        this.triggerInputFile = this.triggerInputFile.bind(this)\n    }\n\n    highlightBarcode(result) {\n        console.log('barcode', result)\n        const { box = [] } = result;\n        const imgEl = document.getElementById(\"uploaded-image\");\n        const cnvs = document.getElementById(\"my-canvas\");\n\n        cnvs.style.position = \"absolute\";\n        cnvs.style.left = imgEl.offsetLeft + \"px\";\n        cnvs.style.top = imgEl.offsetTop + \"px\";\n\n        const ctx = cnvs.getContext(\"2d\");\n        ctx.beginPath();\n\n        let line = box[0];\n        ctx.moveTo(line[0], line[1]);\n\n        line = box[1];\n        ctx.lineTo(line[0], line[1]);\n        ctx.stroke();\n        ctx.moveTo(line[0], line[1]);\n\n        line = box[2];\n        ctx.lineTo(line[0], line[1]);\n        ctx.stroke();\n        ctx.moveTo(line[0], line[1]);\n\n        line = box[3];\n        ctx.lineTo(line[0], line[1]);\n        ctx.stroke();\n        ctx.moveTo(line[0], line[1]);\n\n        line = box[0];\n        ctx.lineTo(line[0], line[1]);\n        ctx.stroke();\n\n        ctx.lineWidth = 3;\n        ctx.strokeStyle = '#ff0000';\n        ctx.stroke();\n    }\n\n    imageToDataUri(imgResize, width, height) {\n\n        // create an off-screen canvas\n        var canvas = document.createElement('canvas'),\n            ctx = canvas.getContext('2d');\n    \n        // set its dimension to target size\n        canvas.width = width;\n        canvas.height = height;\n    \n        // draw source image into the off-screen canvas:\n        ctx.drawImage(imgResize, 0, 0, width, height);\n    \n        // encode image to data-uri with base64 version of compressed image\n        return canvas.toDataURL('image/jpeg', 1.0)\n    }\n\n    async handleChange(event){\n        const files = event.target.files;\n        const file = files[0];\n        let fileData = await this.toBase64(file);\n        // var imgUploaded = new Image();\n        // imgUploaded.src = fileData;\n        // const newDataUri = await this.resizedataURL(imgUploaded, IMAGE_WIDTH, IMAGE_HEIGHT);\n        // console.log('ad', imgUploaded, newDataUri)\n       \n        this.setState({\n            uploadedImage: fileData,\n            isLoading: true\n        }, () => {\n            // const imgEl = document.getElementById(\"uploaded-image\");\n            // const desiredWidth = imgEl.width\n            // const desiredHeight = imgEl.height\n            // const resizeImage = this.imageToDataUri(imgEl, desiredWidth, desiredHeight)\n            // this.scanFileForBarcode(resizeImage)\n        })\n        this.scanFileForBarcode(fileData)\n       \n    }\n    triggerInputFile() { \n        this.fileInput.click() \n    }\n    addToHistory(barcodeObj){\n        const { history = [] } = this.context;\n        history.push(barcodeObj)\n        this.context.setVal({ key: 'history', value: history })\n    }\n    scanFileForBarcode(fileData){\n        const self = this;\n        Quagga.decodeSingle({\n            decoder: {\n                readers: [\"code_128_reader\", \"ean_5_reader\",\"upc_reader\",\"ean_reader\",\"ean_8_reader\", \"ean_2_reader\", \"code_39_reader\", \"code_93_reader\"] // List of active readers\n            },\n            locate: true, // try to locate the barcode in the image\n            size: 536,\n            src: fileData // or 'data:image/jpg;base64,' + data\n        }, function(result){\n            if(result.codeResult) {\n                self.addToHistory({\n                    img:fileData,\n                    barcode:result.codeResult.code,\n                    barcodeType: result.codeResult.format,\n                    time: new Date()\n                })\n                self.highlightBarcode(result)\n                self.setState({\n                    barcodeDetected: result.codeResult.code,\n                    barcodeType: result.codeResult.format,\n                    isLoading:false\n                })\n                \n            } else {\n                self.addToHistory({\n                    img:fileData,\n                    barcode:\"Not Detected\",\n                    time: new Date()\n                })\n                self.setState({\n                    isLoading:false \n                })\n            }\n        });\n    }\n    toBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = error => reject(error);\n        })\n    }\n    render(){\n        const { barcodeDetected = 'No Barcode Detected!!', uploadedImage, isLoading = false, barcodeType } = this.state;\n        return (\n            <div>\n                <Container style={{marginTop:\"50px\"}}>\n                    <Row lg={6}>\n                        <Col style={{\n                            border: '2px solid #000000'\n                        }} lg={6}>\n                            {uploadedImage?<div><img \n                            id='uploaded-image'\n                            alt='barcode-image'\n                            src={uploadedImage} height={IMAGE_HEIGHT} width={IMAGE_WIDTH}\n                            >\n                            </img>\n                                <canvas id='my-canvas' height={\"1000px\"}\n                                    width={\"1000px\"}></canvas>\n                            </div>\n                            :\n                            <div>\n                            <div>\n                            <img \n                            src={img}\n                            alt='upload something'\n                            height=\"400\"\n                            >\n                                \n                            </img>\n                            </div>\n                            Upload a image to scan barcode\n                            </div>\n                            }\n                            \n                        </Col>\n                        <Col lg={\"6\"}>\n                            <Row style={{ marginTop: \"15px\", marginLeft: \"0\", marginRight: \"auto\" }}>\n                                <Card className=\"text-center\" border=\"secondary\" style={{ width: '100%', }}>\n                                    <input\n                                        ref={fileInput => this.fileInput = fileInput}\n                                        type=\"file\"\n                                        onChange={this.handleChange.bind(this)}\n                                        style={{ display: \"none\" }}\n                                        accept=\"image/jpeg\"\n                                    />\n                                    <Card.Body style={{ width: '100%', height: \"130px\" }}>\n                                        <Button onClick={this.triggerInputFile}> Upload File </Button>\n                                        <p>Upload any JPEG image with barcode</p>\n                                    </Card.Body>\n\n\n                                </Card>\n\n                            </Row>\n                            <Row style={{ marginTop: \"15px\", marginLeft: \"0\", marginRight: \"auto\" }}>\n                                <Card className=\"text-center\" border=\"secondary\" style={{ width: '100%', }}>\n                                    <Card.Header >\n                                        \n                                        Barcode Detected:\n                                    </Card.Header>\n                                    <Card.Body style={{ width: '100%', height: \"130px\" }}>\n                                    {isLoading?<Spinner animation=\"border\" />:\n                                    <div><p>Barcode: {barcodeDetected}</p>\n                                    {barcodeType?<p>Barcode Type: {barcodeType}</p>:<p/>}</div>}\n                                    </Card.Body>\n                                </Card>\n\n                            </Row>\n\n                        </Col>\n                    </Row>\n                </Container>\n\n            </div>\n\n        )\n    }\n    \n\n\n}\nFileScan.contextType = AppContext;\nexport default FileScan;","import React from 'react';\nimport { Container, Row, Col, Card } from 'react-bootstrap'\nimport AppContext from '../AppContext';\nimport '../App.css'\n\nclass History extends React.Component {\n    constructor(props){\n        super(props)\n        this.state={\n        }\n    }\n    renderHistory(){\n        const { history = [] } = this.context;\n        return history.map((obj)=>{\n            return(\n                <Card style={{width:\"40%\", margin:\"25px\"}}>\n                    <Card.Header>\n                        Image Uploaded at {obj.time.toTimeString()}\n                    </Card.Header>\n                    <Card.Body>\n                        <Container>\n                            <Row>\n                                <Col>\n                                <img\n                                src={obj.img}\n                                height=\"40\"\n                                width=\"50\"\n                                >\n                                </img>\n                                </Col>\n                                <hr/>\n                                <Col>\n                                    Barcode:{obj.barcode}<br/>\n                                    {obj.barcodeType ? 'Barcode Type: ' + obj.barcodeType : ''}\n                                </Col>\n                            </Row>\n                        </Container>\n                    </Card.Body>\n                </Card>\n            )\n        })\n    }\n    \n    render(){\n        return (\n            <div>\n               {this.renderHistory()} \n            </div>\n\n        )\n    }\n}\n\nHistory.contextType = AppContext;\nexport default History;","import { useCallback, useLayoutEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Quagga from '@ericblade/quagga2';\n\nfunction getMedian(arr) {\n    arr.sort((a, b) => a - b);\n    const half = Math.floor(arr.length / 2);\n    if (arr.length % 2 === 1) {\n        return arr[half];\n    }\n    return (arr[half - 1] + arr[half]) / 2;\n}\n\nfunction getMedianOfCodeErrors(decodedCodes) {\n    const errors = decodedCodes.filter(x => x.error !== undefined).map(x => x.error);\n    const medianOfErrors = getMedian(errors);\n    return medianOfErrors;\n}\n\nconst defaultConstraints = {\n    width: 640,\n    height: 480,\n};\n\nconst defaultLocatorSettings = {\n    patchSize: 'medium',\n    halfSample: true,\n};\n\nconst defaultDecoders = [\"code_128_reader\", \"ean_5_reader\", \"upc_reader\", \"ean_reader\", \"ean_8_reader\", \"ean_2_reader\", \"code_39_reader\", \"code_93_reader\"];\n\nconst Scanner = ({\n    onDetected,\n    scannerRef,\n    onScannerReady,\n    cameraId,\n    facingMode,\n    constraints = defaultConstraints,\n    locator = defaultLocatorSettings,\n    numOfWorkers = navigator.hardwareConcurrency || 0,\n    decoders = defaultDecoders,\n    locate = true,\n}) => {\n    const errorCheck = useCallback((result) => {\n        if (!onDetected) {\n            return;\n        }\n        const err = getMedianOfCodeErrors(result.codeResult.decodedCodes);\n        // if Quagga is at least 75% certain that it read correctly, then accept the code.\n        if (err < 0.25) {\n            onDetected(result.codeResult.code);\n        }\n    }, [onDetected]);\n\n    const handleProcessed = (result) => {\n        const drawingCtx = Quagga.canvas.ctx.overlay;\n        const drawingCanvas = Quagga.canvas.dom.overlay;\n        drawingCtx.font = \"24px Arial\";\n        drawingCtx.fillStyle = 'green';\n\n        if (result) {\n            // console.warn('* quagga onProcessed', result);\n            if (result.boxes) {\n                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute('width')), parseInt(drawingCanvas.getAttribute('height')));\n                result.boxes.filter((box) => box !== result.box).forEach((box) => {\n                    Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: 'purple', lineWidth: 2 });\n                });\n            }\n            if (result.box) {\n                Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: 'blue', lineWidth: 2 });\n            }\n            if (result.codeResult && result.codeResult.code) {\n                // const validated = barcodeValidator(result.codeResult.code);\n                // const validated = validateBarcode(result.codeResult.code);\n                // Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: validated ? 'green' : 'red', lineWidth: 3 });\n                drawingCtx.font = \"24px Arial\";\n                // drawingCtx.fillStyle = validated ? 'green' : 'red';\n                // drawingCtx.fillText(`${result.codeResult.code} valid: ${validated}`, 10, 50);\n                drawingCtx.fillText(result.codeResult.code, 10, 20);\n                // if (validated) {\n                //     onDetected(result);\n                // }\n            }\n        }\n    };\n\n    useLayoutEffect(() => {\n        Quagga.init({\n            inputStream: {\n                type: 'LiveStream',\n                constraints: {\n                    ...constraints,\n                    ...(cameraId && { deviceId: cameraId }),\n                    ...(!cameraId && { facingMode }),\n                },\n                target: scannerRef.current,\n            },\n            locator,\n            numOfWorkers,\n            decoder: { readers: decoders },\n            locate: true,\n        }, (err) => {\n            Quagga.onProcessed(handleProcessed);\n\n            if (err) {\n                return console.log('Error starting Quagga:', err);\n            }\n            if (scannerRef && scannerRef.current) {\n                Quagga.start();\n                if (onScannerReady) {\n                    onScannerReady();\n                }\n            }\n        });\n        Quagga.onDetected(errorCheck);\n        return () => {\n            Quagga.offDetected(errorCheck);\n            Quagga.offProcessed(handleProcessed);\n            Quagga.stop();\n        };\n    }, [cameraId, onDetected, onScannerReady, scannerRef, errorCheck, constraints, locator, decoders, locate]);\n    return null;\n}\n\nScanner.propTypes = {\n    onDetected: PropTypes.func.isRequired,\n    scannerRef: PropTypes.object.isRequired,\n    onScannerReady: PropTypes.func,\n    cameraId: PropTypes.string,\n    facingMode: PropTypes.string,\n    constraints: PropTypes.object,\n    locator: PropTypes.object,\n    numOfWorkers: PropTypes.number,\n    decoders: PropTypes.array,\n    locate: PropTypes.bool,\n};\n\nexport default Scanner;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Result = ({ result }) => (\n    <li>\n        {result.codeResult.code} [{result.codeResult.format}]\n    </li>\n);\n\nResult.propTypes = {\n    result: PropTypes.object\n};\n\nexport default Result;","import React, { useState, useRef } from 'react';\nimport Scanner from './Scanner';\nimport Result from './Result';\n\nconst LiveScan = () => {\n    const [scanning, setScanning] = useState(false);\n    const [results, setResults] = useState([]);\n    const scannerRef = useRef(null);\n\n    return (\n        <div>\n            <button onClick={() => setScanning(!scanning) }>{scanning ? 'Stop' : 'Start'}</button>\n            <ul className=\"results\">\n                {results.map((result) => (result.codeResult && <Result key={result.codeResult.code} result={result} />))}\n            </ul>\n            <div ref={scannerRef} style={{position: 'relative', border: '3px solid red'}}>\n                {/* <video style={{ width: window.innerWidth, height: 480, border: '3px solid orange' }}/> */}\n                <canvas className=\"drawingBuffer\" style={{\n                    position: 'absolute',\n                    top: '0px',\n                    // left: '0px',\n                    // height: '100%',\n                    // width: '100%',\n                    border: '3px solid green',\n                }} width=\"640\" height=\"480\" />\n                {scanning ? <Scanner scannerRef={scannerRef} onDetected={(result) => setResults([...results, result])} /> : null}\n            </div>\n        </div>\n    );\n};\n\nexport default LiveScan;","import React from 'react';\nimport Navbar from './Components/Navbar';\nimport FileScan from './Components/FileScan';\nimport History from './Components/History';\nimport LiveScan from './Components/LiveScan';\nimport { AppProvider } from './AppContext';\n\nclass App extends React.Component {\n    constructor(props){\n        super(props)\n        this.state={\n            currentTab:'fileScan',\n            history:[],\n            setVal: ({ key, value }) => this.setState({ [key]: value })\n        }\n    }\n    renderTab(){\n        const {currentTab} = this.state;\n        switch (currentTab) {\n            case 'fileScan':\n                return (<FileScan/>)\n            case 'history':\n                return (<History/>)\n            case 'liveScan':\n                return (<LiveScan/>)\n        }\n    }\n    render(){\n        return (\n            <div>\n                <AppProvider value={this.state}>\n                    <Navbar />\n                    {this.renderTab()}\n                </AppProvider>\n            </div>\n\n        )\n    }\n    \n\n\n}\n\n\n\n// const App = () => {\n//     const [scanning, setScanning] = useState(false);\n//     const [results, setResults] = useState([]);\n//     const scannerRef = useRef(null);\n\n//     return (\n//         <div>\n\n//             <button onClick={() => setScanning(!scanning) }>{scanning ? 'Stop' : 'Start'}</button>\n//             <ul className=\"results\">\n//                 {results.map((result) => (result.codeResult && <Result key={result.codeResult.code} result={result} />))}\n//             </ul>\n//             <div ref={scannerRef} style={{position: 'relative', border: '3px solid red'}}>\n//                 <video style={{ width: window.innerWidth, height: 480, border: '3px solid orange' }}/>\n//                 <canvas className=\"drawingBuffer\" style={{\n//                     position: 'absolute',\n//                     top: '0px',\n//                     // left: '0px',\n//                     // height: '100%',\n//                     // width: '100%',\n//                     border: '3px solid green',\n//                 }} width=\"640\" height=\"480\" />\n//                 {scanning ? <Scanner scannerRef={scannerRef} onDetected={(result) => setResults([...results, result])} /> : null}\n//             </div>\n//         </div>\n//     );\n// };\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}